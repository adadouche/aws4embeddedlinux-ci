version: 0.2
run-as: yoctouser

env:
  shell: bash
  # HOME is set to /root even when running as a non-root user.
  variables:
    HOME: "/home/yoctouser"

phases:
  pre_build:
    run-as: root
    commands:
      - echo "Pre build started - [$(date '+%F %H:%M:%S')]"
      - mkdir -p /nfs/sstate-cache && chown -R yoctouser /nfs/sstate-cache
      - mkdir -p /nfs/downloads && chown -R yoctouser /nfs/downloads
      - mkdir -p /nfs/build-output && chown -R yoctouser /nfs/build-output
      - chmod -R 755 /nfs/sstate-cache
      - chmod -R 755 /nfs/downloads
      - chmod -R 755 /nfs/build-output
      - |
          if [[ -n "$PURGE_EFS" ]] ; then
            echo "Starting EFS purge."
            rm -rvf /nfs/downloads/*
            rm -rvf /nfs/sstate-cache/*
            rm -rvf /nfs/build-output/*
          fi
      - echo "Pre build completed - [$(date '+%F %H:%M:%S')]"
  build:
    commands:
      - echo "Build started - [$(date '+%F %H:%M:%S')]"
      - if [ -d .git ]; then rm -rf .git; fi
      - git init $CODEBUILD_SRC_DIR && git add --all && git commit -m 'initial'
      - repo init -u $CODEBUILD_SRC_DIR -b main -m manifest.xml
      - repo sync -c --no-tags -j$(nproc --all)
      - . poky/oe-init-build-env $TMP_DIR
      - bitbake-layers add-layer $CODEBUILD_SRC_DIR/meta-openembedded/meta-oe
      - bitbake-layers add-layer $CODEBUILD_SRC_DIR/meta-openembedded/meta-python
      - bitbake-layers add-layer $CODEBUILD_SRC_DIR/meta-openembedded/meta-networking
      - bitbake-layers add-layer $CODEBUILD_SRC_DIR/meta-openembedded/meta-multimedia
      - bitbake-layers add-layer $CODEBUILD_SRC_DIR/meta-openembedded/meta-filesystems
      - bitbake-layers add-layer $CODEBUILD_SRC_DIR/meta-virtualization
      - bitbake-layers add-layer $CODEBUILD_SRC_DIR/meta-aws
      # Update our local conf to build the EC2 AMI.
      - echo 'MACHINE = "aws-ec2-arm64"' >> $TMP_DIR/conf/local.conf
      - echo 'INHERIT += "aws-ec2-image"' >> $TMP_DIR/conf/local.conf
      # Update our local conf to check for CVEs
      - echo 'INHERIT += "cve-check"' >> $TMP_DIR/conf/local.conf
      # this will suppress false positive CVEs
      - echo 'include cve-extra-exclusions.inc' >> $TMP_DIR/conf/local.conf
      # build the image
      - bitbake core-image-minimal
      - echo "Build completed - [$(date '+%F %H:%M:%S')]"
  post_build:
    commands:
      - echo "Post build statred - [$(date '+%F %H:%M:%S')]"
      - echo AMI Upload started
      # This is required because the CDK asset uploader does not seem to carry permissions though.
      # - aws s3 cp ${SCRIPT_URL} $CODEBUILD_SRC_DIR/create-ec2-ami.sh
      # - chmod +x $CODEBUILD_SRC_DIR/create-ec2-ami.sh
      - chmod +x $CODEBUILD_SRC_DIR/create-ec2-ami.sh
      # this list all testdata.json and *.vhd files
      - find $TMP_DIR/tmp/deploy/images/aws-ec2-arm64/  -name *.testdata.json
      - find $TMP_DIR/tmp/deploy/images/aws-ec2-arm64/  -name *.vhd
      # - $CODEBUILD_SRC_DIR/create-ec2-ami.sh $PIPELINE_OUTPUT_BUCKET 16 core-image-minimal aws-ec2-arm64 $TMP_DIR/tmp $VM_IMPORT_ROLE .rootfs
      - |
        $CODEBUILD_SRC_DIR/create-ec2-ami.sh \
          IMPORT_BUCKET_NAME=$PIPELINE_OUTPUT_BUCKET \
          AMI_DISK_SIZE_GB=16 \
          IMAGE_NAME=core-image-minimal \
          MACHINE_NAME=aws-ec2-arm64 \
          TMPDIR=$TMP_DIR/tmp \
          ROLE_NAME=$VM_IMPORT_ROLE \
          IMAGE_EXTEN=.rootfs \
          PIPELINE_PROJECT_NAME=$PIPELINE_PROJECT_NAME

      # Prune old files in our EFS Mounts, that are not accessed by this or any build within 30 days
      - find /nfs/sstate-cache -atime +30 -type f -delete
      # only delete empty dirs
      - find /nfs/sstate-cache -atime +30 -type d -empty -delete
      # Prune old files in our EFS Mounts, that are not accessed by this or any build within 30 days
      - find /nfs/downloads -atime +30 -type f -delete
      # only delete empty dirs
      - find /nfs/downloads -atime +30 -type d -empty -delete
      - echo "Post build completed - [$(date '+%F %H:%M:%S')]"
artifacts:
  discard-paths: true
  files:
    - $TMP_DIR/tmp/deploy/images/aws-ec2-arm64/core-image-minimal*
    - $TMP_DIR/tmp/log/cve/cve-summary*
